# -*- coding: utf-8 -*-
"""modul

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I0BfbuCFiZTPXoVdJtTnUbGcJXzFmuyW
"""

from tabulate import tabulate

# Inisiasi Transaction class
class Transaction:
  """
  Class transaction yang akan digunakan sebagai parent class untuk menyimpan 
  informasi transaksi seperti nama, jumlah, harga
  """

  def __init__ (self):
      self.orders = dict()

  # add_item memasukkan nama, jumlah, dan harga item (add_item)
  def add_item (self, item_name, item_qty, item_price):
      self.orders.update({item_name: [item_qty, item_price]})
      """
      Method add_item yang akan digunakan untuk menambahkan pesanan berdasarkan:
      item_name: nama item
      item_qty: jumlah item
      item_price: harga item
      """
      print(f'Item yang dibeli adalah {item_name} dengan jumlah {item_qty} dan harga per item {item_price}. Total adalah {item_qty*item_price}')

      # Memastikan value qty dan price dalam bentuk integer
      try:
        self.item_qty = int(item_qty)
        self.item_price = int(item_price)
      except:
        print("Jumlah dan harga barang harus berupa angka")
    
  
  # update_item_name untuk meng-update nama dari item
  def update_item_name(self, item_name, new_item_name):
    temp = self.orders[item_name]
    self.orders.pop(item_name)
    self.orders.update({new_item_name:temp})

    
  # update_item_qty untuk meng-update jumlah dari item
  def update_item_qty(self, item_name, new_item_qty):
    self.orders[item_name][0] = new_item_qty


  # update_item_price untuk meng-update harga dari item
  def update_item_price(self, item_name, new_item_price):
    self.orders[item_name][1] = new_item_price  

  
  # Menunjukkan data pesanan dalam bentuk tabel
  def show_order(self):
      show_order = []
      header = ["No.","Nama Item", "Jumlah Item", "Harga/Item", "Total Harga"]
      show_order.append(header)

      n = 0
      """
      show_order untuk menyajikan data transaksi dalam bentuk tabel dengan kolom:
      No
      Nama Item
      Jumlah Item
      Harga per item
      Total Harga
      """

      for key, value in self.orders.items():
          n += 1
          table_no = n
          item_name = key
          item_qty = value[0]
          item_price = value[1]
          total = item_qty * item_price
          item_data = [table_no, item_name, item_qty, item_price, total]
          show_order.append(item_data)
      
      print(tabulate(show_order))

  # delete_item untuk hapus barang ketika customer tidak jadi membeli suatu barang
  def delete_item(self, item_name):
      try:
        self.orders.pop(item_name)
        print(f"Anda berhasil menghapus pesanan {item_name}")
        print("")
      except KeyError:
       print(f"Nama barang {item_name} tidak terdapat pada daftar pemesanan")
      

  # reset_transaction untuk mengulang dari awal transaksi yang dibuat
  def reset_transaction(self):
      transaction = {}
      self.orders = transaction
      print ("Semua item berhasil di delete!")

  # check_order untuk memastikan order sudah sesuai
  def check_order(self):
      for key, value in self.orders.items():
          item_name = key
          item_qty = value[0]
          item_price = value[1]
            
      if type(item_name) == str and type(item_qty) == int and type(item_price) == int:
          print("Pemesananan sudah benar")
      else: 
        print("Terdapat kesalahan input data/pesanan")


  #discount_eligible untuk melihat apakah total pembelian layak mendapat diskon
  def discount_eligible(self, total_price):
    self.total_price = total_price
    if self.total_price <= 200000:
      discount_eligible = False
      discount = 0.0
    else:
      discount_eligible = True
      if self.total_price > 500000:
        discount = 0.1
      elif total_price > 300000:
        discount = 0.08
      elif total_price > 200000:
        discount = 0.05
      
    return discount_eligible, discount


  # total_price untuk menghitung total belanjaan
  def total_price(self):
      self.total_price = 0
      for value in self.orders.values():
          item_qty = value[0]
          item_price = value[1]
          self.total_price += (item_qty * item_price)
      discount_eligible, discount = self.discount_eligible(self.total_price)
      self.final_price = self.total_price * (1 - discount)

      if discount_eligible == True:
        print(f'Anda mendapat diskon sebesar {discount * 100:.0f}%,\n sehingga Anda hanya perlu membayar Rp.{self.final_price:.2f} ')
      else:
        print(f"Total yang harus Anda bayar adalah Rp.{self.total_price}")

trnsct_123 = Transaction()